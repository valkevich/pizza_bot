const { Telegraf, Markup } = require('telegraf')
const { pizzas } = require('./constants')

require('dotenv').config()

const bot = new Telegraf(process.env.BOT_TOKEN)
const basket = {
    pizza: {},
    salads: {},
    desserts: {},
    drinks: {}
}

bot.start(async (ctx) => {
    await ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}! ‚úã`)
    await ctx.reply(`–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º –±–æ—Ç–∞ –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ üôÇ. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏!üçï`)
})

// mainMenu = async (ctx) => {
//     try {
//         await ctx.replyWithHTML('<b>–ü—Ä–∏–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞</b>', Markup.inlineKeyboard(
//             [
//                 [Markup.button.callback('–ú–µ–Ω—é üóÇ', 'menu')],
//                 [Markup.button.callback('–í–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç ‚ùì', 'questions')],
//                 [Markup.button.callback('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã üçï', 'restaurants')],
//                 [Markup.button.callback('–ö–æ—Ä–∑–∏–Ω–∞ üß∫', 'basket')]
//             ]
//         ))
//     } catch (error) {
//         console.log(error);
//     }
// }

// bot.action('menu', async (ctx) => {
//     try {
//         await ctx.answerCbQuery()
//         await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –±–ª—é–¥–æ</b>', Markup.inlineKeyboard( // –∫–Ω–æ–ø–∫–∏
//             [
//                 [Markup.button.callback('–ü–∏—Ü—Ü–∞ üçï', 'pizza'), Markup.button.callback('–°–∞–ª–∞—Ç—ã ü•ó', 'salads')],
//                 [Markup.button.callback('–î–µ—Å–µ—Ä—Ç—ã üç∞', 'desserts'), Markup.button.callback('–ù–∞–ø–∏—Ç–∫–∏ üßÉ', 'drinks')],
//             ]
//         ))
//     } catch (error) {
//         console.log(error);
//     }
// })




// –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
bot.hears('–ú–µ–Ω—é üóÇ', async (ctx) => {
    try {
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –±–ª—é–¥–æ</b>', Markup.inlineKeyboard( // –∫–Ω–æ–ø–∫–∏
            [
                [Markup.button.callback('–ü–∏—Ü—Ü–∞ üçï', 'pizza'), Markup.button.callback('–°–∞–ª–∞—Ç—ã ü•ó', 'salads')],
                [Markup.button.callback('–î–µ—Å–µ—Ä—Ç—ã üç∞', 'desserts'), Markup.button.callback('–ù–∞–ø–∏—Ç–∫–∏ üßÉ', 'drinks')],
            ]
        ))
    } catch (error) {
        console.log(error);
    }
})

//–û—Ç–∫—Ä—ã—Ç—å –ø–∏—Ü—Ü—ã
bot.action('pizza', async (ctx) => {
    try {
        await ctx.answerCbQuery()
        for (let pizza in pizzas) {
            await ctx.replyWithPhoto({ source: pizzas[pizza].photo })
            await ctx.replyWithHTML(`–ü–∏—Ü—Ü–∞:<b> ${pizzas[pizza].name}</b>, –¶–µ–Ω–∞: <b>${pizzas[pizza].price} ‚òùÔ∏è</b> `, Markup.inlineKeyboard(
                [
                    [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üß∫', pizzas[pizza].name)],

                ]))
        }
    } catch (error) {
        console.log(error);
    }
})


addInBasket = (productType, product) =>  {
    basket.productType.product = basket.productType.product + 1;
}

for (let pizza in pizzas) {
    bot.action(`${pizzas[pizza].name}`, async (ctx) => {
        await ctx.reply(`${pizzas[pizza].name}`)
    })
}


// –ö–æ—Ä–∑–∏–Ω–∞


bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))